
Client_Server
1) Клиент-серверная архитектура

«Клиент - сервер» - это вычислительная или сетевая архитектура, в которой задания или сетевая нагрузка распределены между поставщиками услуг, называемыми серверами, и заказчиками услуг, называемыми клиентами.

Клиент <> Сервер <> База Данных


• Клиент - это компьютер, запрашивающий некоторую функцию или данные у сервера.

• Сервер - это компьютер, на котором хранятся данные, или который выполняет определенные служебные функции для других компьютеров сети. 

• БД - основное хранилище где находятся наши файлы, которые предоставляются при запросе, если у клиента есть доступ к этим данным.



2) Что ткое HTTP и HTTPS?

• HTTP (HyperText Transfer Protocol - «протокол передачи гипертекста») - протокол прикладного уровня передачи данных (изначально — в виде гипертекстовых документов в формате «HTML», в настоящий момент используется для передачи произвольных данных).

• HTTPS (HyperText Transfer Protocol Secure) - расширение протокола HTTP для поддержки шифрования в целях повышения безопасности. Данные в протоколе HTTPS передаются поверх криптографических протоколов SSL (из-за атак выведен из эксплуатации) или TLS (сейчас используется). В отличие от HTTP с TCP-портом 80, для HTTPS по умолчанию используется TCP-порт 443.


3) HTTP методы

 1. C - Create => создаётся с помощью оператора INSERT
 2. R - Read => реализовывается с помощью оператора SELECT
 3. U - Update => с помощью PUT
 4. D - Delete => Delete

 1. GET – SELECT - запрашивает предоставление ресурса, т.е. наш клиент просто отправляет информацию и запрашивает ее от сервера. 
 2. POST – INSERT служит для того, чтобы создавать уникальные объекты на сервере.  
 3. PUT – PUT служит для того, чтобы добавлять к созданным объектам уже какую-то информацию. 
 4. DELETE – DELETE служит для того, чтобы эту информацию удалять. 
Остальные методы:
 5. OPTIONS 
 6. HEAD
 7. TRACE
 8. CONNECT
 9. PATCH


4) HTTP статус коды сервера

1хх   Informational — информационные коды. Запрос получен и понят, а обработка продолжается.                   
 • 100   Continue,   101   Switching Protocols 
2xx   Success — коды успешно выполненных запросов. Запрос был успешно получен, понят и обработан.    
 • 200   OK,  201 Created, 202   Accepted
3xx   Redirection — коды перенаправлений. Для выполнения запроса должны быть предприняты дальнейшие действия.                      
 • 301 Moved Permanently,  302 Moved Temporarily, 302 Found
4xx   Client Error — коды ошибок клиента. Запрос имеет плохой синтаксис или не может быть выполнен.         
 • 400 Bad Request, 401 Unauthorize, 403 Forbidden, 404 Not Found
5xx   Server Error — коды ошибок сервера. Cервер не в состоянии выполнить допустимый запрос.
 • 500 Internal Server Error, 503 Service Unavailable


5) Что такое ядро браузера? 

Ядро браузера можно разделить на две части: движок рендеринга (инженер макета или движок рендеринга) и движок JS.
• Механизм рендеринга. Он отвечает за получение содержимого веб-страницы (HTML, XML, изображения и т. д.), организацию информации (например, добавление CSS и т. д.) и вычисление режима отображения веб-страницы, а затем вывод на монитор или принтер. Разница в ядре браузера будет по-разному интерпретировать синтаксис веб-страницы, поэтому эффект рендеринга также будет другим.
• Механизм JS анализирует язык Javascript и выполняет язык Javascript для достижения динамического эффекта веб-страницы.

Сначала не было четкого различия между движком рендеринга и движком JS, а позже движок JS становился все более и более независимым, и ядро ​​ссылалось только на движок рендеринга. Команда проекта веб-стандартов создала ACID для проверки совместимости и производительности движка. Существует много типов ядер, таких как добавление некоммерческих бесплатных ядер, которые никто не использует, может быть более 10 видов, но общие ядра браузера можно разделить на четыре типа: Trident, Gecko, Blink, Webkit.


6) Какие браузеры какие ядра используют?

• Trident(Internet Explorer)
Trident, который называется «Режим совместимости», является одним из ядер многих двухъядерных браузеров в Китае.
Представители: IE, Maxthon, Window of the World Browser, Avant, Tencent TT, Cheetah Secure Browser, 360 Speed ​​Browser, Baidu Browser и др.
После выпуска Window10 IE назвал свой встроенный браузер Edge, наиболее заметной особенностью Edge является новое ядро ​​EdgeHTML.

• Gecko(Firefox)
Gecko (ядро Firefox): Mozilla FireFox (браузер Firefox) использует это ядро, для Gecko характерен полностью открытый код, поэтому его можно разрабатывать в высокой степени, и программисты по всему миру могут писать для него код и добавлять функции. Жаль, что эти годы упали, такие как медленная скорость открытия, частые обновления, свирепый напарник по команде, богоподобный хром противника.

• Webkit(Safari)
Safari - это браузер, разработанный Apple, и название используемого ядра браузера - известный WebKit.

• Chromium/Bink(chrome)
В проекте Chromium механизм рендеринга Blink (то есть ядро ​​браузера) был разработан и встроен в браузер Chrome. Blink на самом деле является веткой WebKit.
В последней версии большинства отечественных браузеров используется ядро ​​Blink.

• Presto(Opera)
Presto является «предшественником» ядра норвежской браузерной оперы, поэтому его называют «предшественником», потому что последний браузер оперы давно отказался от него и поставил его в объятия Google.


7) Что такое API

• API — это тестирование «бизнес-логики», занимающее середину пирамиды тестирования 
• API — это методы, которыми программы обещаются между собой.
• API — это контракт.

• API включает:
 ⁃ операция;
 ⁃ данные на входе;
 ⁃ данные на выходе;

• API — это набор функций

Работа с API:

• Напрямую:
 1. Система вызывает функции внутри себя
 2. Система 1 вызывает метод другой системы
 3. В автотестах

• Косвенно:
 1. Пользователь работает с GUI

Remote API — общение по сети (удалённое), по протоколу HTTP, GMS и т.д.

Пример API:
 ⁃ платежная система 
 ⁃ подсказки
 ⁃ онлайн-консультант


8. Что такое Эндпоинты?

• Эндпоинт (Endpoint - конечная точка) — это само обращение к маршруту отдельным HTTP методом. Эндпоинт выполняют конкретную задачу, принимают параметры и возвращают данные Клиенту.


9) URL (URI, URL, URN)

Расшифровка аббревиатур:
• URL - Uniform Resource Locator (унифицированный определитель местонахождения ресурса)
• URN - Unifrorm Resource Name (унифицированное имя ресурса)
• URI - Uniform Resource Identifier (унифицированный идентификатор ресурса)
Внимание! Далее в мелочах кроется истина, и пока ничего не понятно, - какая-то каша, но, едем дальше.

В чем различия
• URL: Исторически возник самым первым из понятий и закрепился как синоним термина веб-адрес. URL определяет местонахождение ресурса в сети и способ его (ресурса) извлечения.
Это позволяет нам полностью узнать: как, кому и где можно достать требуемый ресурс, вводя понятия схемы, данных авторизации и местонахождения.

• URN: Неизменяемая последовательность символов определяющая только имя некоторого ресурса. Смысл URN в том, что им единоразово и уникально именуется какая-либо сущность в рамках конкретного пространства имен (контекста), либо без пространства имен, в общем (что не желательно). Таким образом, URN способен преодолеть недостаток URL связанный с возможным будущим изменением и перемещением ссылок, однако, теперь для того, чтобы знать местонахождение URN ресурса необходимо обращаться к системе разрешения имен URN, в которой он должен быть зарегистрирован.

• URI: Это лишь обобщенное понятие (множество) идентификации ресурса, включающее в нашем случае как URL, так и URN, как по отдельности, так и совместно. Т.е. мы можем считать, что: URI = URL или URI = URN или URI = URL + URN

10) Идемпотентные HTTP методы

Метод HTTP является идемпотентным, если повторный идентичный запрос, сделанный один или несколько раз подряд, имеет один и тот же эффект, не изменяющий состояние сервера.
Другими словами если многократное повторение одних и тех же запросов возвращает одинаковые результаты, то метод считается идемпотентным.

• Виды идемпотентных методов:
- GET - безопасный - идемпотентный
- PUT - небезопасный - идемпотентный
- DELETE - небезопасный - идемпотентный
- HEAD - безопасный - идемпотентный
- OPTIONS - безопасный - идемпотентный
- TRACE - безопасный - идемпотентный


11) Безопасные HTTP методы

Метод HTTP является безопасным, если он не меняет состояние сервера. Другими словами, безопасный метод проводит операции "только чтение" (read-only).

- GET - безопасный - идемпотентный
- HEAD - безопасный - идемпотентный
- OPTIONS - безопасный - идемпотентный
- TRACE - безопасный - идемпотентный

12) Иденфикация, Аутентификация, Авторизация

Идентификация, аутентификация и авторизация – три процесса защищающие Ваши данные или денежные средства от доступа посторонних лиц.
• Идентификация — процесс распознавания пользователя по его идентификатору.
• Аутентификация — процедура проверки подлинности, доказательство что пользователь именно тот, за кого себя выдает.
• Авторизация — предоставление определённых прав.

Механизмы идентификации, аутентификации и авторизации
Находясь на сайте банка, пользователь решает зайти в личный кабинет, чтобы сделать денежный перевод. На странице личного кабинета система вначале просит ввести идентификатор. Это может быть логин, имя и фамилия, адрес электронной почты или номер мобильного телефона.

Какой конкретно вид данных необходимо ввести – зависит от ресурса. Данные, которые указывались при регистрации, необходимо ввести для получения доступа. Если при регистрации указывалось несколько типов данных – и логин, и адрес электронной почты, и номер мобильного, то система сама подскажет что ей конкретно нужно.
Ввод этих данных необходим для идентификации человека за монитором как пользователя конкретно этого банка.
Если пользователь в качестве идентификатора ввел «Александр Петров», и система нашла в своей базе запись о пользователе с таким именем, то идентификация завершилась.

После идентификации следует процесс аутентификации, в котором пользователю нужно доказать, что он является человеком, который регистрировался под именем Александр Петров.
Для доказательства необходимо наличие одного из типов аутентификационных данных:
Нечто, присущее только пользователю. Биометрические данные: сканеры лица, отпечатки пальцев или сетчатки глаза.
Нечто, известное только пользователю. Сюда относятся pin-коды, пароли, графические ключи, секретные слова.
Нечто, имеющееся у пользователя. В данном качестве может выступать токен, то есть компактное устройство, предназначенное для обеспечения информационной безопасности пользователя, также используется для идентификации владельца. Самые простые токены не требуют физического подключения к компьютеру – у них имеется дисплей, где отображается число, которое пользователь вводит в систему для осуществления входа; более сложные подключаются к компьютерам посредством USB и Bluetooth-интерфейсов.

Самый распространенный тип аутентификационных данных – это пароль. Именно поэтому так важно создавать и правильно хранить свои пароли. 
После ввода пользователем пароля система проверяет: соответствует ли условный пароль «Q45fp02@13» пользователю с именем Александр Петров. Таким образом происходит аутентификация.
Если все верно, и пара логин-пароль верны, то система предоставит пользователю доступ к его ресурсам и совершение банковских операций, то есть произойдет авторизация.

Описанные процессы всегда происходят только в таком порядке: идентификация, аутентификация, авторизация. Вся цепочка потеряет смысл, если, например, сайт сначала предоставит доступ к денежным средствам пользователя, а потом будет уточнять, он ли это на самом деле.
Процессы идентификации, аутентификации и авторизации характерны не только для онлайн-банкинга, но и для электронной почты, социальных сетей и других ресурсов.
В реальной жизни мы также сталкиваемся идентификацией, аутентификацией и авторизацией. Примером может служить проверка документов сотрудником полиции. Вы представились как Александр Петров, и сотрудник полиции идентифицировал Вас как Александра Петрова. Для аутентификации необходим паспорт, в котором видно, что Александр Петров выглядит так же, как и вы. Авторизацией в данном случае будет то, что сотрудник отпустит вас и пожелает счастливого пути, т.е. предоставит право свободного перемещения.

Процессы идентификации, аутентификации и авторизации есть во многих сферах. Даже в простейших детских сказках. Сказка «Волк и семеро козлят» является идеальным примером для демонстрации.
Здесь козлята выступают в роли системы безопасности, идентифицируя каждого, кто подходит к двери. В качестве данных для аутентификации выступает биометрия – тонкий голосок мамы-козы. И если в первый раз волк не смог пройти аутентификацию (его выдал грубый голос), то со второй попытки (после того как ему перековали горло, и он запел тонким голоском) он аутентифицировался как мама-коза и козлята «авторизовали» его в свою избу.
Несмотря на то, что сказка закончилась благополучно, доступ к козлятам был получен неправомерно. Волку удалось обмануть процессы идентификации и аутентификации и тем самым пройти авторизацию.
Если в старой детской сказке это оказалось возможным, то что говорить о современных злоумышленниках. Чтобы защитить свои денежные средства и персональные данные и козлят от волка от злоумышленника необходимо использовать более сложные способы аутентификации.

13) Что такое IP?

• IP-адрес – это уникальный адрес, идентифицирующий устройство в интернете или локальной сети. IP означает «Интернет-протокол» – набор правил, регулирующих формат данных, отправляемых через интернет или локальную сеть.

• По сути, IP-адрес – это идентификатор, позволяющий передавать информацию между устройствами в сети: он содержит информацию о местоположении устройства и обеспечивает его доступность для связи. IP-адреса позволяют различать компьютеры, маршрутизаторы и веб-сайты в интернете и являются важным компонентом работы интернета.

14) Что такое откаты в DNS?

15) Что такое порт, сколько портов у Linux сервера?

• Сетевые порты - это механизм, с помощью которого операционная система определяет какой именно программе необходимо передать сетевой пакет. Здесь можно привести пример с домом. Например, почтальону необходимо доставить посылку. Он доставляет посылку к дому, это IP адрес компьютера.
Все порты разделены на три диапазона — общеизвестные (или системные, 0—1023), зарегистрированные (или пользовательские, 1024—49151) и динамические (или частные, 49152—65535). Первоначально номера портов использовались в ARPANET протоколом NCP.
• Протокол TCP — это надежный транспортный протокол, в результате которого при передаче файлов происходит гарантия того, что информация доходит до нашего клиента. 
Пример: почтовые сервисы

• Протокол UDP — не нужно убеждаться в том, что информация дошла до клиента, т.е. это происходит непрерывным потоком, информация передаётся, и нет никаких механизмов которые говорили бы о том, что гарантированно наша информация попала к клиенту, либо серверу. 
Пример: онлайн-игры.


16) Уровни OSI

Всего в модели сетевого взаимодействия выделяют 7 уровней:
• Физический (Physical)
• Канальный уровень (Data Link)
• Сетевой уровень (Network)
• Транспортный уровень (Transport)
• Сеансовый уровень (Session)
• Уровень представления (Presentation)
• Уровень приложений (Application)

17) Хедеры http запросов

• Заголовки HTTP (англ. HTTP Headers) — это строки в HTTP-сообщении, содержащие разделённую двоеточием пару имя-значение. Формат заголовков соответствует общему формату заголовков текстовых сетевых сообщений ARPA (см. RFC 822). Заголовки должны отделяться от тела сообщения хотя бы одной пустой строкой.

Все заголовки разделяются на четыре основных группы:
• General Headers (рус. Основные заголовки) — должны включаться в любое сообщение клиента и сервера.
• Request Headers (рус. Заголовки запроса) — используются только в запросах клиента.
• Response Headers (рус. Заголовки ответа) — только для ответов от сервера.
• Entity Headers (рус. Заголовки сущности) — сопровождают каждую сущность сообщения.

